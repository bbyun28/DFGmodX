#!/usr/bin/env python3

import sys,os
import re,glob
import subprocess
import pandas as pd

from Bio import SeqIO
from Bio.Seq import Seq

from x_pir_edit import CheckPIR
from x_pir_edit import ModifyMultiPiecePIR

from x_variables import per_line
from x_pir_functions import FASTA_Gen
from x_pir_functions import TemplYCheck
from x_pir_functions import SequenceAlign
from x_pir_functions import CleanFASTAName
from x_pir_functions import CacheSeqDatabase
from x_pir_functions import CheckUnnaturalAA
from x_pir_functions import MuscleProfileAlign
from x_pir_functions import ParseFastaSeqForPIR
from x_pir_functions import MissingLoopCorrection
from x_pir_functions import BuildMultiPieceTemplatePDB

##########################################################################
## Generate alignment file for target kinase and template kinases, where
## pre-aligned fasta sequences are pulled from databases and append together
## and the 4-piece template PDB is generated by stacking in the order of
## templ-target-templ-target, where .pir for this 4-piece template will be
## generated later
## If CIDI modeling, use only best-matched xtal for single template modelling
def ModellerAlignGen( pdb_directory, work_directory,
                      struct_database, struct_nogap, kinome_database, kinome_nogap,
                      template_list, tget_pdb, mdl_prot_fasta, 
                      best_match_struc, pc_ident, align_switch, correct_fasta,
                      chimera_tmpl_list, mdl_pir_file, mdl_output_pref ):

  # Build database of full-seq FASTA
  Database, db_order = CacheSeqDatabase([struct_database,kinome_database])
  NoGapDB,  ng_order = CacheSeqDatabase([struct_nogap,kinome_nogap])

  Tmpl_List = pd.read_csv(template_list, comment='#', sep='\s+', header=None).iloc[:,0].to_numpy()
  print('\n\033[34m## The following PDBs will be used as templates:\033[0m\n'+template_list)
  print(Tmpl_List)
  print('\n')


  # Generate '_TEMP.{x}.y1.fasta' as intermediate, will check for percent
  # identity. This is also the insert point for corrected fasta if alignment
  # did not work out and need manual intervention '*y1.corr.fasta'. Since
  # it is corrected and need to maintain the exact format, no alignment will
  # be done to the corrected fasta
  # Convert the intermediate/corrected fasta to '_TEMP.{x}.y2.fasta'
  if re.search('None', correct_fasta, re.IGNORECASE):
    print('\033[34m## Running with Normal \033[31m"_TEMP.{0}.y1.fasta"\033[0m'.format(mdl_output_pref))
    SequenceAlign(  Database, NoGapDB, kinome_database, pdb_directory, 
                    Tmpl_List, tget_pdb, mdl_prot_fasta, best_match_struc,
                    pc_ident, align_switch, mdl_pir_file, mdl_output_pref )
  else:
    print('\033[31m## Running with CORRECTED Fasta file:\n\033[31m{0}\033[0m'.format(correct_fasta))
    CleanFASTAName( correct_fasta, work_directory, mdl_pir_file )

  ## Build the chimera templates PDBs for PIR numbering, then
  ## Modify Fasta alignment to make 4-piece .pir and template PDB for modeller input;
  ## For CIDI, make pseudo-chimeric multi-piece template .pir for modelling, while
  ## CIDO/CODI/CODO make chimeric multi-piece template .pir
  if re.search('cidi', template_list, re.IGNORECASE):
    Tmpl_List = [ tget_pdb.split('/')[-1] ]
    BuildMultiPieceTemplatePDB(pdb_directory, Tmpl_List, tget_pdb, chimera_tmpl_list)
    GenerateCIDIPIR(mdl_pir_file, mdl_output_pref)
  else:
    BuildMultiPieceTemplatePDB(pdb_directory, Tmpl_List, tget_pdb, chimera_tmpl_list)
    GenerateMultiPiecePIR(mdl_pir_file, mdl_output_pref)


  print('\n## Check the Target FASTA to make sure starting and ending\n##  residues, and missing loops are accounted for.\n##  Check the presence of phospho- or unnatural amino acid residue.\n')
  for fasta in SeqIO.parse('_TEMP.corrected.fasta', 'fasta'):
    print(fasta.format('fasta'))


###########################################################################
## Convert multi seq alignment into Modeller .pir alignment file; specific for 
## CIDO/CODI/CODO, build chimeric multi-piece template fasta and PDBs
def GenerateMultiPiecePIR( mdl_pir_file, mdl_output_pref ):

  ## Read prepared FASTA alignment file for PIR generation
  Templ = ParseFastaSeqForPIR( mdl_pir_file )

  # Pop out Target Fasta ([-1]) and Base (best-fit [-2] from imported Fasta file
  Target = Templ.pop(-1)
  Base   = Templ.pop(-1)

  ## Write out partially-prepared Modeller file (*.pir.prep)from alignment file
    # First write out the chimera-template Fasta. Alter the header lines for
    # the Target Fasta and append to last of the file; all are multi-piece
  with open('{0}.prep'.format(mdl_pir_file), 'w') as w:
    # Write out the chimera-template kinases first,
    for idx, Ali in enumerate(Templ):
      w.write('### {0}: {1} ###\n'.format(idx, Ali[0]))
      # Write the tethered template Fasta, 4 times
      for ln in Ali:          # Write template small lobe seq with header
        w.write(ln)
      w.write('\n')
      for ln in Base[2:]:	  # Write 1st large lobe part without header
        w.write(ln+'\n')
      for ln in Ali[2:]:      # Write DFG-loop without header
        w.write(ln+'\n')
      for ln in Base[2:]:	  # Write 2nd large lobe part without header
        w.write(ln+'\n')
      w.write("*\n\n")		    # Write the Modeller sequence Ending

    # Write the Target seq in tethered form, reformat the header lines
    w.write('### {0}: {1} ###\n'.format('final', Target[0]))
    for line in Target:
      if re.search(r'>P1;', line):
        old_name = line.rstrip().split(';')[1]
      line = re.sub(old_name, mdl_output_pref, line)
      line = re.sub(r'structureX', 'sequence', line)
      line = re.sub(r'-1\.00:-1\.00', ':', line)
      w.write(line)
    w.write('\n')
    for x in range(3):  # write the sequence 3 more times without header
      for ln in Target[2:]:
        w.write(ln+'\n')
    w.write("*")

  # Write out the partially-prepared Modeller .pir.prep file
  ModifyMultiPiecePIR(  CheckPIR( mdl_pir_file+'.prep', mdl_output_pref ), 
                        per_line(), mdl_pir_file, mdl_output_pref,
                        cidi_model=False )



###########################################################################
## Convert Single seq alignment into Modeller .pir alignment file; specific for
## CIDI, build pseudo-chermic multi-piece template and PDBs like those for 
## CIDO/CODI/CODO, but using the same 1 xtal template throughout instead
def GenerateCIDIPIR( mdl_pir_file, mdl_output_pref ):

  ## Read prepared FASTA alignment file for PIR generation; 
  ## should only have 2 items
  Templ = ParseFastaSeqForPIR( mdl_pir_file )

  print('\033[31mtempl: \033[0m', len(Templ))
  # Pop out Target Fasta ([-1]) and Base (best-fit [-2] from imported Fasta file
  Target = Templ.pop(-1)

  ## Write out partially-prepared Modeller file (*.pir.prep)from alignment file
  # First write out the best-matched xtal fasta. Alter the header lines for
  # the Target Fasta and append to last of the file. Both are single-piece
  with open('{0}.prep'.format(mdl_pir_file), 'w') as w:
    # Write out the chimera-template kinases first,
    for idx, Ali in enumerate(Templ):
      w.write('### {0}: {1} ###\n'.format(idx, Ali[0]))
      # Write the tethered template Fasta, 4 times
      for ln in Ali:          # Write template small lobe seq with header
        w.write(ln)
      w.write('\n')
      for ln in Ali[2:]:	  # Write 1st large lobe part without header
        w.write(ln+'\n')
      for ln in Ali[2:]:      # Write DFG-loop without header
        w.write(ln+'\n')
      for ln in Ali[2:]:	  # Write 2nd large lobe part without header
        w.write(ln+'\n')
      w.write("*\n\n")		    # Write the Modeller sequence Ending

    # Write the Target seq in tethered form, reformat the header lines
    w.write('### {0}: {1} ###\n'.format('final', Target[0]))
    for line in Target:
      if re.search(r'>P1;', line):
        old_name = line.rstrip().split(';')[1]
      line = re.sub(old_name, mdl_output_pref, line)
      line = re.sub(r'structureX', 'sequence', line)
      line = re.sub(r'-1\.00:-1\.00', ':', line)
      w.write(line)
    w.write('\n')
    for x in range(3):  # write the sequence 3 more times without header
      for ln in Target[2:]:
        w.write(ln+'\n')
    w.write("*")

  # Write out the partially-prepared Modeller .pir.prep file
  ModifyMultiPiecePIR( CheckPIR( mdl_pir_file+'.prep', mdl_output_pref ), 
                        per_line(), mdl_pir_file, mdl_output_pref, 
                        cidi_model=True )



##########################################################################
#
#	Peter M.U. @ MSSM
#
#   v1.0 - 14.03.08
#   v2.0 - 14.04.02 -   added function to take in the full-length sequence
#                       of the target protein and compare it to crystal-
#			generated sequence to find out the missing loops,
#       		and incorporate the info into model generation.
#   v3.0 - 14.04.09 --  added function to take in mTOR/PI3K atypical kinase
#   v4.0 - 14.04.28 --  alert for unnatural amino acids or heteroatoms
#   v5.0 - 14.07.29 --  allow manually supplied alignment file
#   v6.0 - 14.07.31 --  change main alignment program to TCoffee/Expresso
#   v7.0 - 14.10.02 --  added the .pir modification function to parse Model
#                       Removed the 'atypical' function, 1) not compatible
#                       with the auto-parsing of Model, 2) not accurate
#   v8.0 - 16.12.05 --  mark out sys.exit; modify Biopython SeqIO
#   v9.0 - 17.03.30 --  fix a bug when using automated template search, rewrite
#                       pir writeout and tether-PDB writeout
#   v10. - 17.05.03 --  fix a bug with modeller cannot take PDB without uniform
#                       chain ID; fix a bug with generating .pir with correct
#                       number of chimera-template sequences; remove duplicate
#                       fasta seqs to avoid t_coffee problem
#   v11. - 17.06.28 --  use pre-aligned kinase profile as scaffod for alignment
#   v12. - 17.07.14 --  fix bug not generating de-HETATM pdb file in rare cases
#   v13. - 18.03.09 --  fix bug with wrong sequence counting, and adopt CODI
#                       multiple runs
#   v14. - 18.03.29     use Muscle to do alignment
#   v15  - 18.06.09     check change between '_TEMP.x2.fasta' n '_TEMP.x3.fasta'
#                       if any insertion due to missing residues in xtal struct
#   v16  - 20.02.20     edit MUSCLE gap scaling to enforce profile gap matching
#   v17  - 20.04.12     separate the pir-functions to a separate file for clarity
#
#	Purpose:
#	This script generating the chimera PDB and aligned FASTA file input
#	for DFG-in --> DFG-out kinase modelling by MODELLER.
#
#	This script reads in the list of PDB files that will be used as
#	DFG-out template and generate the FASTA from the PDB.
#	A problem with BioPython FASTA generation with proteins with missing
#	loops is that the resultent crystal-FASTA does not have indication of
#	the missing loop; other programs looking at this crystal-FASTA may
#	interprete the FASTA as a single continuous chain. To make sure the 
#	missing loops in the PDB structure does not affect the model generated 
#	by MODELLER, the crystal-FASTA is aligned to the full-seq FASTA of
#	the corresponding protein. The resultent crystal-FASTA will be 
#	corrected for the missing loops with '-'. ClustalO will recognite the
#	'-' designation and align the sequences accordingly.
#	
###	TCoffee is called to align all templates to the kinase being modeled.
###	TCoffee mode 'Expresso' is used. This function retreives 3D structures
###	similar to the given sequences and uses the structural information to
###	generate final alignments.
#
#   # TCoffee is decipated for use and now will use Muscle to perform
#     single-sequence profile alignment - faster and mostly accurate
#
#       The MODELLER-alignment file (.pir) is parsed by the function DFGModify,
#       by recognizing several consistent sites for cut/paste (S/G next to 
#       hinge region, before DFG motif, and before APE motif).
#	(Previously, the MODELLER-alignment file was partially done and 
#       required additional modification to indicate the region of small lobe 
#       and DFG loop being modelled)
#
#	This script caternates the *superposed-PDB* files to create a tethered 
#	PDB used by MODELLER to model the regions in the kinase:
#		1) Small lobe (based on the knonw DFG-out template PDB)
#		2) large lobe (based on the DFG-in of the modelled PDB)
#	        3) DFG-loop   (based on the known DFG-out template PDB)
#	        4) large lobe (based on the DFG-in of the modelled PDB)
#		5) ligand (extracted from template PDB and cat to end of PDB)
#
#	Required:
#	- Superposed PDB files
#	- Remove non-ligands HETATM (e.g. solvent, salts)
#	- Post-processing of MODELLER alignment file
#	- Full-length sequence of the target kinase
#
#
##########################################################################